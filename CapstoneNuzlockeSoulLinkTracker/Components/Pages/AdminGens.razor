@inject AdminData adminData

<div class="row">
    <div class="col-1">
        <button @onclick="BackToAdmin" class="btn pkmn-form-btn">Back</button>
    </div>
    <div class="col-3">
        <button @onclick="SaveChanges" class="btn pkmn-form-btn">Save Changes</button>
        <button @onclick="DiscardChanges" class="btn pkmn-form-btn ms-3">Discard Changes</button>
    </div>
    <div class="col">
        @if (errorText != null)
        {
            <p class="pkmn-error-txt">@errorText</p>
        }
        else if (successText != null)
        {
            <p class="pkmn-success-txt">@successText</p>
        }
    </div>
    <div class="col-1"></div>
</div>

<div class="row mt-3">
    @if (generations.Any())
    {
        @foreach (var gen in generations)
        {
            @if (!gen.ToBeDeleted)
            {
                <div class="row">
                    <div class="col-1"></div>
                    <div class="col-2">
                        <label class="col-sm-7">Roman Num: </label>
                        <InputText @bind-Value="gen.Gen.RomanNumeral" @bind-Value:after="() => ModifyGen(gen)" class="pkmn-fields col-sm-4 ms-2" />
                    </div>
                    <div class="col"></div>
                    <div class="col-1">
                        <button @onclick="() => DeleteGen(gen)" class="pkmn-error-txt">X</button>
                    </div>
                </div>
            }
        }
    }
    <div class="row mt-3">
        <div class="col-5"></div>
        <div class="col-2">
            <button @onclick="AddGen" class="btn pkmn-form-btn">Add New Gen</button>
        </div>
        <div class="col-5"></div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnBack { get; set; }

    private string? errorText;

    private string? successText;

    List<AdminGenModel> generations = new List<AdminGenModel>();

    protected override async Task OnInitializedAsync()
    {
        generations = await adminData.GetAdminGens();
    }

    private async Task SaveChanges()
    {
        try
        {

            foreach (var gen in generations)
            {
                if (gen.New)
                {
                    await adminData.CreateGen(gen.Gen);
                }
                else if (gen.ToBeDeleted)
                {
                    await adminData.DeleteGen(gen.Gen.GenId);
                }
                else if (gen.Modified)
                {
                    await adminData.ModifyGen(gen.Gen);
                }
            }

            successText = "All Changes Saved!";
            errorText = null;

            generations = await adminData.GetAdminGens();
        }
        catch
        {
            errorText = "An error occured!";
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DiscardChanges()
    {
        generations = await adminData.GetAdminGens();

        errorText = "All Changes Discarded!";

        await InvokeAsync(StateHasChanged);
    }

    private async Task ModifyGen(AdminGenModel gen)
    {
        if (!gen.New)
        {
            gen.Modified = true;
        }
    }

    private void AddGen()
    {
        generations.Add(new AdminGenModel
            {
                Gen = new GenerationModel
                {
                    RomanNumeral = ""
                },
                New = true
            });

        successText = "New Gen Staged!";
    }

    private async Task DeleteGen(AdminGenModel gen)
    {
        if (!gen.New)
        {
            gen.ToBeDeleted = true;
            gen.Modified = false;

            successText = "Gen Deletion Staged!";
        }
        else
        {
            generations.Remove(gen);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task BackToAdmin()
    {
        await OnBack.InvokeAsync();
    }
}
