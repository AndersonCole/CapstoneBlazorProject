@inject PlayerAccount playerAccount
@inject NavigationManager Navigation
@inject NavMenuData navMenuData

<div class="justify-content-between">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                @* <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> *@ Active Runs
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="leaderboard">
                @* <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> *@ Leaderboard
            </NavLink>
        </div>

        @if (runs.Any())
        {
            @foreach (var run in runs)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@($"run/{run.RunId}")">@run.RunName</NavLink>
                </div>
            }
        }

        @if (playerAccount.Username != null)
        {
            @if (playerAccount.IsAdmin)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="admin">Admin Page</NavLink>
                </div>
            }
        }
    </nav>
</div>

@code {
    List<RunModel> runs = new List<RunModel>();

    protected override async Task OnInitializedAsync()
    {
        if (playerAccount.Username != null)
        {
            runs = await navMenuData.GetRunsFromPlayerId(playerAccount.Id);
        }
    }
}